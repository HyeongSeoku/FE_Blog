name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Type Check
        run: pnpm run type-check

      - name: Run ESLint
        run: pnpm run lint

      - name: Run Prettier (check only)
        run: pnpm run format:check

      - name: Run cSpell
        run: pnpm run spell-check

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_GITHUB_TOKEN=${{ secrets.NEXT_PUBLIC_GITHUB_TOKEN }}" >> .env
          echo "NEXT_PUBLIC_GISCUS_REPO_ID=${{ secrets.NEXT_PUBLIC_GISCUS_REPO_ID }}" >> .env
          echo "NEXT_PUBLIC_GISCUS_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GISCUS_CLIENT_ID }}" >> .env
          echo "NEXT_PUBLIC_REPO_URL=${{ secrets.NEXT_PUBLIC_REPO_URL }}" >> .env
          echo "NEXT_PUBLIC_GA_ID=${{ secrets.NEXT_PUBLIC_GA_ID }}" >> .env
          echo "NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}">> .env

      - name: Build project
        run: pnpm run build

      - name: Run next-sitemap (postbuild)
        run: pnpm run postbuild

      - name: Verify sitemap & robots exist
        run: |
          ls -al public | grep -E 'sitemap|robots' || (echo "❌ no sitemap/robots" && exit 1)

      - name: Cache Next.js build cache
        if: github.ref == 'refs/heads/main'
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml', 'next.config.mjs') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: Archive production build
        run: |
          tar -czf build.tar.gz \
            .next \
            public \
            package.json \
            pnpm-lock.yaml \
            next.config.mjs \
            tsconfig.json \
            postcss.config.* \
            tailwind.config.* \
            ecosystem.config.cjs

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: seoku-blog-build
          path: build.tar.gz

  lighthouse:
    name: Lighthouse
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_GITHUB_TOKEN=${{ secrets.NEXT_PUBLIC_GITHUB_TOKEN }}" >> .env
          echo "NEXT_PUBLIC_GISCUS_REPO_ID=${{ secrets.NEXT_PUBLIC_GISCUS_REPO_ID }}" >> .env
          echo "NEXT_PUBLIC_GISCUS_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GISCUS_CLIENT_ID }}" >> .env
          echo "NEXT_PUBLIC_REPO_URL=${{ secrets.NEXT_PUBLIC_REPO_URL }}" >> .env
          echo "NEXT_PUBLIC_GA_ID=${{ secrets.NEXT_PUBLIC_GA_ID }}" >> .env
          echo "NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}">> .env

      - name: Build project
        run: pnpm run build

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm i -g @lhci/cli
          lhci autorun

      - name: Upload Lighthouse Report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: .lighthouseci/report.html

      - name: Create PR comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            🚨 Lighthouse Report 결과입니다!

            ✅ [리포트 다운로드 및 확인](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            위 링크 하단의 "Artifacts > lighthouse-report" 항목을 클릭하면 리포트를 확인할 수 있습니다.

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: [self-hosted]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Ensure pnpm
        run: npm install -g pnpm

      - name: Prepare release dir
        run: mkdir -p "${{ github.workspace }}/release"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: seoku-blog-build
          path: ${{ github.workspace }}/release

      - name: Extract build artifact
        working-directory: ${{ github.workspace }}/release
        run: |
          rm -rf .next
          tar -xzf build.tar.gz
          ls -al public | grep -E 'sitemap|robots'

      - name: Install production deps
        working-directory: ${{ github.workspace }}/release
        run: pnpm install --prod --frozen-lockfile

      - name: Start or Reload (PM2)
        working-directory: ${{ github.workspace }}/release
        run: |
          if pm2 describe seoku-blog >/dev/null 2>&1; then
            pm2 reload ecosystem.config.cjs --only seoku-blog --update-env
          else
            pm2 start  ecosystem.config.cjs --only seoku-blog --update-env
          fi
          pm2 save

      - name: Health check via Next (loopback, retry)
        run: |
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:3000/sitemap.xml >/dev/null; then
              echo "Health OK"; exit 0
            fi
            echo "Waiting for app... ($i/30)"
            sleep 2
          done
          echo "App did not become healthy in time"
          pm2 status
          pm2 logs seoku-blog --lines 200
          exit 1
